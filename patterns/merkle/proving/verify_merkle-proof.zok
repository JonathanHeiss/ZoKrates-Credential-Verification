// Based on: https://raw.githubusercontent.com/Zokrates/ZoKrates/a757921bad1bab80aafe2ac7c2caccab88feb9f7/zokrates_cli/examples/merkleTree/sha256PathProof3.zok

import "hashes/sha256/512bitPadded.code" as hash
import "hashes/sha256/512bitPadded.code" as sha256

import "hashes/utils/256bitsDirectionHelper" as multiplex

from "ecc/babyjubjubParams" import BabyJubJubParams
import "signatures/verifyEddsa.code" as verifyEddsa
import "ecc/babyjubjubParams.code" as context

const u32 DEPTH = 3

def select(bool condition, u32[8] left, u32[8] right) -> (u32[8], u32[8]):
	return if condition then right else left fi, if condition then left else right fi

// Merke-Tree inclusion proof for tree depth 4 using sha256
// directionSelector => true if current digest is on the rhs of the hash

def main(private u32[8] leaf, u32[8] root, private bool[DEPTH] directionSelector, private u32[DEPTH][8] path, private field[2] R, private field S, field[2] A, u32[8] M0, u32[8] M1) -> (bool, bool, bool):
	//Verify Signature (R,S) with PupKey (A) on Hash (M0, M1)
	BabyJubJubParams context = context()		
    bool isVerified = verifyEddsa(R, S, A, M0, M1, context)
    u32[8] hash1 = sha256([0, 0, 0, 0, 0, 0, 0, 0], leaf)
    bool hashcheck = hash1 == M0

	// Start from the leaf
	u32[8] digest = leaf

	// Loop up the tree
	for u32 i in 0..DEPTH do
		u32[8] left, u32[8] right = select(directionSelector[i], digest, path[i])
		digest = hash(left, right)
	endfor

	bool inSet = digest == root

	return isVerified, hashcheck, inSet